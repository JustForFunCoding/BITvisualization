import unittest

from bit_ru_rq_2d import BitRuRq2d
from support_tests import get_prefix_sums_2d


class Test2dBitRuRq(unittest.TestCase):
    def test_update(self):
        """
        2D Range update Range query BIT: Test of update method
        """

        bit = BitRuRq2d(5)

        bit.update(3, 4, 5, 5, 3)
        # some of the updater operations won't be defined
        # (because some of row or columns indices will be greater than size),
        # but it doesn't matter in our case, because it has no effect on the tree
        """
        bitxy after updater(3, 4, 5, 5, 3):
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 3, 0]
                    [0, 0, 0, 0, 3, 0]
                    [0, 0, 0, 0, 0, 0]
                    
        bitx after updater(3, 4, 5, 5, -3 * (4 - 1) = -9):
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, -9, 0]
                    [0, 0, 0, 0, -9, 0]
                    [0, 0, 0, 0, 0, 0]
                    
        bitx after updater(3, 6, 5, 5, 3 * (5 - 4 + 1) = 6):
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, -9, 0]
                    [0, 0, 0, 0, -9, 0]
                    [0, 0, 0, 0, 0, 0]
                    
        bity after updater(3, 4, 5, 5, -3 * (3 - 1) = -6):
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, -6, 0]
                    [0, 0, 0, 0, -6, 0]
                    [0, 0, 0, 0, 0, 0]
                    
        bity after updater(6, 4, 5, 5, 3 * (5 - 3 + 1) = 9):
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, -6, 0]
                    [0, 0, 0, 0, -6, 0]
                    [0, 0, 0, 0, 0, 0]
                    
        biti after updater(3, 4, 5, 5, 3 * (3 * 4 - 3 - 4 + 1) = 18):
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 18, 0]
                    [0, 0, 0, 0, 18, 0]
                    [0, 0, 0, 0, 0, 0]
                    
        biti after updater(6, 4, 5, 5, -3 * (4 - 1) * (5 - 3 + 1) = -27):
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 18, 0]
                    [0, 0, 0, 0, 18, 0]
                    [0, 0, 0, 0, 0, 0]
        
        biti after updater(3, 6, 5, 5, -3 * (3 - 1) * (5 - 4 + 1) = -12):
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 18, 0]
                    [0, 0, 0, 0, 18, 0]
                    [0, 0, 0, 0, 0, 0]
                    
        biti after updater(6, 6, 5, 5, 18):
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 18, 0]
                    [0, 0, 0, 0, 18, 0]
                    [0, 0, 0, 0, 0, 0]
        """
        self.assertEqual(bit.bitxy.tree, [
                    [0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 3, 0],
                    [0, 0, 0, 0, 3, 0],
                    [0, 0, 0, 0, 0, 0]
        ])
        self.assertEqual(bit.bitx.tree, [
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, -9, 0],
            [0, 0, 0, 0, -9, 0],
            [0, 0, 0, 0, 0, 0]
        ])
        self.assertEqual(bit.bity.tree, [
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, -6, 0],
            [0, 0, 0, 0, -6, 0],
            [0, 0, 0, 0, 0, 0]
        ])
        self.assertEqual(bit.biti.tree, [
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 18, 0],
            [0, 0, 0, 0, 18, 0],
            [0, 0, 0, 0, 0, 0]
        ])

        bit.update(1, 1, 4, 3, 5)
        """
        bitxy after updater(1, 1, 4, 3, 5):
                    [0, 0, 0, 0, 0, 0]
                    [0, 5, 5, 0, 0, 0]
                    [0, 5, 5, 0, 0, 0]
                    [0, 0, 0, 0, 3, 0]
                    [0, 5, 5, 0, 3, 0]
                    [0, -5, -5, 0, 0, 0]

        bitx after updater(1, 1, 4, 3, -5 * (1 -1) = 0):
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, -9, 0]
                    [0, 0, 0, 0, -9, 0]
                    [0, 0, 0, 0, 0, 0]

        bitx after updater(1, 4, 4, 5, 5 * (3 - 1 + 1) = 15):
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 15, 0]
                    [0, 0, 0, 0, 15, 0]
                    [0, 0, 0, 0, -9, 0]
                    [0, 0, 0, 0, 6, 0]
                    [0, 0, 0, 0, -15, 0]

        bity after updater(1, 1, 4, 3, -5 * (1 - 1) = 0):
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, -6, 0]
                    [0, 0, 0, 0, -6, 0]
                    [0, 0, 0, 0, 0, 0]

        bity after updater(5, 1, 5, 3, 5 * (4 - 1 + 1) = 20):
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, -6, 0]
                    [0, 0, 0, 0, -6, 0]
                    [0, 20, 20, 0, 0, 0]

        biti after updater(1, 1, 4, 3, 5 * (1 * 1 - 1 - 1 + 1) = 0):
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 18, 0]
                    [0, 0, 0, 0, 18, 0]
                    [0, 0, 0, 0, 0, 0]

        biti after updater(5, 1, 5, 3, 5 * (1 - 1) * (4 - 1 + 1) = 0):
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 18, 0]
                    [0, 0, 0, 0, 18, 0]
                    [0, 0, 0, 0, 0, 0]

        biti after updater(1, 4, 4, 5, -5 * (1 - 1) * (3 - 1 + 1) = 0):
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 18, 0]
                    [0, 0, 0, 0, 18, 0]
                    [0, 0, 0, 0, 0, 0]

        biti after updater(5, 4, 5, 5, 5 * (4 - 1 + 1) * (3 - 1 + 1) = 60):
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 18, 0]
                    [0, 0, 0, 0, 18, 0]
                    [0, 0, 0, 0, 60, 0]
        """
        self.assertEqual(bit.bitxy.tree, [
            [0, 0, 0, 0, 0, 0],
            [0, 5, 5, 0, 0, 0],
            [0, 5, 5, 0, 0, 0],
            [0, 0, 0, 0, 3, 0],
            [0, 5, 5, 0, 3, 0],
            [0, -5, -5, 0, 0, 0]
        ])
        self.assertEqual(bit.bitx.tree, [
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 15, 0],
            [0, 0, 0, 0, 15, 0],
            [0, 0, 0, 0, -9, 0],
            [0, 0, 0, 0, 6, 0],
            [0, 0, 0, 0, -15, 0]
        ])
        self.assertEqual(bit.bity.tree, [
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, -6, 0],
            [0, 0, 0, 0, -6, 0],
            [0, 20, 20, 0, 0, 0]
        ])
        self.assertEqual(bit.biti.tree, [
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 18, 0],
            [0, 0, 0, 0, 18, 0],
            [0, 0, 0, 0, 60, 0]
        ])

        bit.update(2, 3, 3, 4, 6)
        """
        bitxy after updater(2, 3, 3, 4, 6):
                    [0, 0, 0, 0, 0, 0]
                    [0, 5, 5, 0, 0, 0]
                    [0, 5, 5, 6, 6, -6]
                    [0, 0, 0, 0, 3, 0]
                    [0, 5, 5, 0, 3, 0]
                    [0, -5, -5, 0, 0, 0]

        bitx after updater(2, 3, 3, 4, -6 * (3 - 1) = -12):
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 15, 0]
                    [0, 0, 0, -12, 3, 12]
                    [0, 0, 0, 0, -9, 0]
                    [0, 0, 0, 0, 6, 0]
                    [0, 0, 0, 0, -15, 0]

        bitx after updater(2, 5, 3, 5, 6 * (4 - 3 + 1) = 12):
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 15, 0]
                    [0, 0, 0, -12, 3, 24]
                    [0, 0, 0, 0, -9, 0]
                    [0, 0, 0, 0, 6, 0]
                    [0, 0, 0, 0, -15, 0]

        bity after updater(2, 3, 3, 4, -6 * (2 - 1) = -6):
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, -6, -6, 6]
                    [0, 0, 0, 0, -6, 0]
                    [0, 0, 0, 0, -6, 0]
                    [0, 20, 20, 0, 0, 0]

        bity after updater(4, 3, 5, 4, 6 * (3 - 2 + 1) = 12):
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, -6, -6, 6]
                    [0, 0, 0, 0, -6, 0]
                    [0, 0, 0, 12, 6, -12]
                    [0, 20, 20, 0, 0, 0]

        biti after updater(2, 3, 3, 4, 6 * (2 * 3 - 2 - 3 + 1) = 12):
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 12, 12, -12]
                    [0, 0, 0, 0, 18, 0]
                    [0, 0, 0, 0, 18, 0]
                    [0, 0, 0, 0, 60, 0]

        biti after updater(4, 3, 5, 4, -6 * (3 - 1) * (3 - 2 + 1) = -24):
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 12, 12, -12]
                    [0, 0, 0, 0, 18, 0]
                    [0, 0, 0, -24, -6, 24]
                    [0, 0, 0, 0, 60, 0]

        biti after updater(2, 5, 3, 5, -6 * (2 - 1) * (4 - 3 + 1) = -12):
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 12, 12, -24]
                    [0, 0, 0, 0, 18, 0]
                    [0, 0, 0, -24, -6, 24]
                    [0, 0, 0, 0, 60, 0]

        biti after updater(4, 5, 5, 5, 6 * (3 - 2 + 1) * (4 - 3 + 1) = 24):
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 0, 0, 0]
                    [0, 0, 0, 12, 12, -24]
                    [0, 0, 0, 0, 18, 0]
                    [0, 0, 0, -24, -6, 48]
                    [0, 0, 0, 0, 60, 0]
        """
        self.assertEqual(bit.bitxy.tree, [
            [0, 0, 0, 0, 0, 0],
            [0, 5, 5, 0, 0, 0],
            [0, 5, 5, 6, 6, -6],
            [0, 0, 0, 0, 3, 0],
            [0, 5, 5, 0, 3, 0],
            [0, -5, -5, 0, 0, 0]
        ])
        self.assertEqual(bit.bitx.tree, [
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 15, 0],
            [0, 0, 0, -12, 3, 24],
            [0, 0, 0, 0, -9, 0],
            [0, 0, 0, 0, 6, 0],
            [0, 0, 0, 0, -15, 0]
        ])
        self.assertEqual(bit.bity.tree, [
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, -6, -6, 6],
            [0, 0, 0, 0, -6, 0],
            [0, 0, 0, 12, 6, -12],
            [0, 20, 20, 0, 0, 0]
        ])
        self.assertEqual(bit.biti.tree, [
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 12, 12, -24],
            [0, 0, 0, 0, 18, 0],
            [0, 0, 0, -24, -6, 48],
            [0, 0, 0, 0, 60, 0]
        ])

    def test_query(self):
        """
        2D Range update Range query BIT: Test of query method
        """
        arr = [[3, 1, 4, 1, 5, 9, 2],
               [6, 5, 3, 5, 8, 9, 7],
               [9, 3, 2, 3, 8, 4, 6],
               [2, 6, 4, 3, 3, 8, 3],
               [2, 7, 9, 5, 0, 2, 8],
               [8, 4, 1, 9, 7, 1, 6],
               [9, 3, 9, 9, 3, 7, 5]]
        n = len(arr)
        bit = BitRuRq2d(n)

        for row in range(1, n + 1):
            for col in range(1, n + 1):
                bit.update(row, col, row, col, arr[row - 1][col - 1])

        prefix_sums = get_prefix_sums_2d(arr)
        for row in range(1, n + 1):
            for col in range(1, n + 1):
                self.assertEqual(bit.query(row, col), prefix_sums[row][col])


if __name__ == "__main__":
    unittest.main()
