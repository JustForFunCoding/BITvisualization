import unittest

from bit_ru_pq_2d import BitRuPq2d


class Test2dBitRuPq(unittest.TestCase):
    def test_updatep(self):
        """
        2D Range update Point query BIT: Test of updatep method
        """

        # updatep method in BitRuPq2d is the same as is in BitPuRq2d,
        # but we should add some unit tests also in this file
        # in case we change implementation of updatep in class BitRuPq2d

        bit = BitRuPq2d(5)

        bit.updatep(4, 1, 3)
        self.assertEqual(bit.tree,
                         [
                             [0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0],
                             [0, 3, 3, 0, 3, 0],
                             [0, 0, 0, 0, 0, 0]
                         ])

        bit.updatep(3, 2, -5)
        self.assertEqual(bit.tree,
                         [
                             [0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0],
                             [0, 0, -5, 0, -5, 0],
                             [0, 3, -2, 0, -2, 0],
                             [0, 0, 0, 0, 0, 0]
                         ])

        bit.updatep(1, 3, 2)
        self.assertEqual(bit.tree,
                         [
                             [0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 2, 2, 0],
                             [0, 0, 0, 2, 2, 0],
                             [0, 0, -5, 0, -5, 0],
                             [0, 3, -2, 2, 0, 0],
                             [0, 0, 0, 0, 0, 0]
                         ])

        bit.updatep(2, 1, 4)
        self.assertEqual(bit.tree,
                         [
                             [0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 2, 2, 0],
                             [0, 4, 4, 2, 6, 0],
                             [0, 0, -5, 0, -5, 0],
                             [0, 7, 2, 2, 4, 0],
                             [0, 0, 0, 0, 0, 0]
                         ])

        bit.updatep(5, 1, 2)
        self.assertEqual(bit.tree,
                         [
                             [0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 2, 2, 0],
                             [0, 4, 4, 2, 6, 0],
                             [0, 0, -5, 0, -5, 0],
                             [0, 7, 2, 2, 4, 0],
                             [0, 2, 2, 0, 2, 0]
                         ])

        ####################
        bit = BitRuPq2d(8)

        bit.updatep(3, 1, 2)
        self.assertEqual(bit.tree,
                         [
                             [0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 2, 2, 0, 2, 0, 0, 0, 2],
                             [0, 2, 2, 0, 2, 0, 0, 0, 2],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 2, 2, 0, 2, 0, 0, 0, 2]
                         ])

        bit.updatep(5, 2, -3)
        self.assertEqual(bit.tree,
                         [
                             [0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 2, 2, 0, 2, 0, 0, 0, 2],
                             [0, 2, 2, 0, 2, 0, 0, 0, 2],
                             [0, 0, -3, 0, -3, 0, 0, 0, -3],
                             [0, 0, -3, 0, -3, 0, 0, 0, -3],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 2, -1, 0, -1, 0, 0, 0, -1]
                         ])

        bit.updatep(1, 3, 5)
        self.assertEqual(bit.tree,
                         [
                             [0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 5, 5, 0, 0, 0, 5],
                             [0, 0, 0, 5, 5, 0, 0, 0, 5],
                             [0, 2, 2, 0, 2, 0, 0, 0, 2],
                             [0, 2, 2, 5, 7, 0, 0, 0, 7],
                             [0, 0, -3, 0, -3, 0, 0, 0, -3],
                             [0, 0, -3, 0, -3, 0, 0, 0, -3],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 2, -1, 5, 4, 0, 0, 0, 4]
                         ])

        bit.updatep(7, 1, -3)
        self.assertEqual(bit.tree,
                         [
                             [0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 5, 5, 0, 0, 0, 5],
                             [0, 0, 0, 5, 5, 0, 0, 0, 5],
                             [0, 2, 2, 0, 2, 0, 0, 0, 2],
                             [0, 2, 2, 5, 7, 0, 0, 0, 7],
                             [0, 0, -3, 0, -3, 0, 0, 0, -3],
                             [0, 0, -3, 0, -3, 0, 0, 0, -3],
                             [0, -3, -3, 0, -3, 0, 0, 0, -3],
                             [0, -1, -4, 5, 1, 0, 0, 0, 1]
                         ])

    def test_updater(self):
        """
        2D Range update Point query BIT: Test of updater method
        """

        bit = BitRuPq2d(8)

        bit.updater(3, 5, 6, 7, 3)
        """
        after updatep(3, 5, 3):
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 3, 3, 0, 3]
                             [0, 0, 0, 0, 0, 3, 3, 0, 3]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 3, 3, 0, 3]
                             
        after updatep(7, 5, -3):
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 3, 3, 0, 3]
                             [0, 0, 0, 0, 0, 3, 3, 0, 3]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, -3, -3, 0, -3]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             
        after updatep(3, 8, -3):
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 3, 3, 0, 0]
                             [0, 0, 0, 0, 0, 3, 3, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, -3, -3, 0, -3]
                             [0, 0, 0, 0, 0, 0, 0, 0, -3]
                             
        after updatep(7, 8, 3):
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 3, 3, 0, 0]
                             [0, 0, 0, 0, 0, 3, 3, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, -3, -3, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
        """
        self.assertEqual(bit.tree,
                         [
                             [0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 3, 3, 0, 0],
                             [0, 0, 0, 0, 0, 3, 3, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, -3, -3, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                         ])

        bit.updater(4, 3, 6, 5, -5)
        """
        after updatep(4, 3, -5):
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 3, 3, 0, 0]
                             [0, 0, 0, -5, -5, 3, 3, 0, -5]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, -3, -3, 0, 0]
                             [0, 0, 0, -5, -5, 0, 0, 0, -5]
                             
        after updatep(7, 3, 5)
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 3, 3, 0, 0]
                             [0, 0, 0, -5, -5, 3, 3, 0, -5]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 5, 5, -3, -3, 0, 5]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             
        after updatep(4, 6, 5):
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 3, 3, 0, 0]
                             [0, 0, 0, -5, -5, 3, 8, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 5, 5, -3, -3, 0, 5]
                             [0, 0, 0, 0, 0, 0, 5, 0, 5]
                             
        after updatep(7, 6, -5):
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 3, 3, 0, 0]
                             [0, 0, 0, -5, -5, 3, 8, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 5, 5, -3, -8, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
        """
        self.assertEqual(bit.tree, [
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 3, 3, 0, 0],
            [0, 0, 0, -5, -5, 3, 8, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 5, 5, -3, -8, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0]
        ])

        bit.updater(1, 1, 6, 4, 2)
        """
        after updatep(1, 1, 2):
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 2, 2, 0, 2, 0, 0, 0, 2]
                             [0, 2, 2, 0, 2, 0, 0, 0, 2]
                             [0, 0, 0, 0, 0, 3, 3, 0, 0]
                             [0, 2, 2, -5, -3, 3, 8, 0, 2]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 5, 5, -3, -8, 0, 0]
                             [0, 2, 2, 0, 2, 0, 0, 0, 2]
                             
        after updatep(7, 1, -2):
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 2, 2, 0, 2, 0, 0, 0, 2]
                             [0, 2, 2, 0, 2, 0, 0, 0, 2]
                             [0, 0, 0, 0, 0, 3, 3, 0, 0]
                             [0, 2, 2, -5, -3, 3, 8, 0, 2]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, -2, -2, 5, 3, -3, -8, 0, -2]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             
        after updatep(1, 5, -2):
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 2, 2, 0, 2, -2, -2, 0, 0]
                             [0, 2, 2, 0, 2, -2, -2, 0, 0]
                             [0, 0, 0, 0, 0, 3, 3, 0, 0]
                             [0, 2, 2, -5, -3, 1, 6, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, -2, -2, 5, 3, -3, -8, 0, -2]
                             [0, 0, 0, 0, 0, -2, -2, 0, -2]
                             
        after updatep(7, 5, 2):
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 2, 2, 0, 2, -2, -2, 0, 0]
                             [0, 2, 2, 0, 2, -2, -2, 0, 0]
                             [0, 0, 0, 0, 0, 3, 3, 0, 0]
                             [0, 2, 2, -5, -3, 1, 6, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
                             [0, -2, -2, 5, 3, -1, -6, 0, 0]
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]
        """
        self.assertEqual(bit.tree, [
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 2, 2, 0, 2, -2, -2, 0, 0],
            [0, 2, 2, 0, 2, -2, -2, 0, 0],
            [0, 0, 0, 0, 0, 3, 3, 0, 0],
            [0, 2, 2, -5, -3, 1, 6, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, -2, -2, 5, 3, -1, -6, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0]
        ])

    def test_queryp(self):
        """
        2D Range update Point query BIT: Test of queryp method
        """

        arr = [[3, 1, 4, 1, 5, 9, 2],
               [6, 5, 3, 5, 8, 9, 7],
               [9, 3, 2, 3, 8, 4, 6],
               [2, 6, 4, 3, 3, 8, 3],
               [2, 7, 9, 5, 0, 2, 8],
               [8, 4, 1, 9, 7, 1, 6],
               [9, 3, 9, 9, 3, 7, 5]]

        n = len(arr)
        bit = BitRuPq2d(n)
        for row in range(n):
            for col in range(n):
                bit.updater(row + 1, col + 1, row + 1, col + 1, arr[row][col])
                self.assertEqual(bit.queryp(row + 1, col + 1), arr[row][col])


if __name__ == "__main__":
    unittest.main()
